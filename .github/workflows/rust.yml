name: Rust

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache target directory
      uses: actions/cache@v3
      with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: clippy
    
    - name: Install Protobuf Compiler
      run: sudo apt-get update && sudo apt-get install -y protobuf-compiler
      
    - name: Check with Clippy on changed files
      run: |
        # Determine base commit depending on event type
        if [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
          BASE_COMMIT=$(git merge-base $GITHUB_BASE_REF $GITHUB_SHA)
        else
          # Check if the current commit has a parent commit
          if git rev-parse --verify $GITHUB_SHA^ > /dev/null 2>&1; then
            BASE_COMMIT=$GITHUB_SHA^  # Using the parent commit of the current commit
          else
            BASE_COMMIT=$GITHUB_SHA  # Use the current commit if no parent is available
          fi
        fi
    
        # Get changed files in Rust format
        CHANGED_FILES=$(git diff --name-only $BASE_COMMIT $GITHUB_SHA | grep '\.rs$')
        if [ -n "$CHANGED_FILES" ]; then
          echo "Running Clippy on changed files..."
          echo "$CHANGED_FILES" | xargs cargo clippy -- -D warnings
        else
          echo "No Rust files changed."
        fi
      
    - name: Build
      run: cargo build --verbose
      
    - name: Run tests
      run: cargo test --verbose
